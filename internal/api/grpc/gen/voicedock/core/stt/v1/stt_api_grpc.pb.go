// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: voicedock/core/stt/v1/stt_api.proto

package sttv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SttAPI_SpeechToText_FullMethodName         = "/voicedock.core.stt.v1.SttAPI/SpeechToText"
	SttAPI_GetLanguagePacks_FullMethodName     = "/voicedock.core.stt.v1.SttAPI/GetLanguagePacks"
	SttAPI_DownloadLanguagePack_FullMethodName = "/voicedock.core.stt.v1.SttAPI/DownloadLanguagePack"
)

// SttAPIClient is the client API for SttAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SttAPIClient interface {
	// Converts speech to text.
	SpeechToText(ctx context.Context, opts ...grpc.CallOption) (SttAPI_SpeechToTextClient, error)
	// Returns available language packs.
	GetLanguagePacks(ctx context.Context, in *GetLanguagePacksRequest, opts ...grpc.CallOption) (*GetLanguagePacksResponse, error)
	// Downloads selected language pack.
	DownloadLanguagePack(ctx context.Context, in *DownloadLanguagePackRequest, opts ...grpc.CallOption) (*DownloadLanguagePackResponse, error)
}

type sttAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSttAPIClient(cc grpc.ClientConnInterface) SttAPIClient {
	return &sttAPIClient{cc}
}

func (c *sttAPIClient) SpeechToText(ctx context.Context, opts ...grpc.CallOption) (SttAPI_SpeechToTextClient, error) {
	stream, err := c.cc.NewStream(ctx, &SttAPI_ServiceDesc.Streams[0], SttAPI_SpeechToText_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sttAPISpeechToTextClient{stream}
	return x, nil
}

type SttAPI_SpeechToTextClient interface {
	Send(*SpeechToTextRequest) error
	Recv() (*SpeechToTextResponse, error)
	grpc.ClientStream
}

type sttAPISpeechToTextClient struct {
	grpc.ClientStream
}

func (x *sttAPISpeechToTextClient) Send(m *SpeechToTextRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sttAPISpeechToTextClient) Recv() (*SpeechToTextResponse, error) {
	m := new(SpeechToTextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sttAPIClient) GetLanguagePacks(ctx context.Context, in *GetLanguagePacksRequest, opts ...grpc.CallOption) (*GetLanguagePacksResponse, error) {
	out := new(GetLanguagePacksResponse)
	err := c.cc.Invoke(ctx, SttAPI_GetLanguagePacks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sttAPIClient) DownloadLanguagePack(ctx context.Context, in *DownloadLanguagePackRequest, opts ...grpc.CallOption) (*DownloadLanguagePackResponse, error) {
	out := new(DownloadLanguagePackResponse)
	err := c.cc.Invoke(ctx, SttAPI_DownloadLanguagePack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SttAPIServer is the server API for SttAPI service.
// All implementations must embed UnimplementedSttAPIServer
// for forward compatibility
type SttAPIServer interface {
	// Converts speech to text.
	SpeechToText(SttAPI_SpeechToTextServer) error
	// Returns available language packs.
	GetLanguagePacks(context.Context, *GetLanguagePacksRequest) (*GetLanguagePacksResponse, error)
	// Downloads selected language pack.
	DownloadLanguagePack(context.Context, *DownloadLanguagePackRequest) (*DownloadLanguagePackResponse, error)
	mustEmbedUnimplementedSttAPIServer()
}

// UnimplementedSttAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSttAPIServer struct {
}

func (UnimplementedSttAPIServer) SpeechToText(SttAPI_SpeechToTextServer) error {
	return status.Errorf(codes.Unimplemented, "method SpeechToText not implemented")
}
func (UnimplementedSttAPIServer) GetLanguagePacks(context.Context, *GetLanguagePacksRequest) (*GetLanguagePacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguagePacks not implemented")
}
func (UnimplementedSttAPIServer) DownloadLanguagePack(context.Context, *DownloadLanguagePackRequest) (*DownloadLanguagePackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadLanguagePack not implemented")
}
func (UnimplementedSttAPIServer) mustEmbedUnimplementedSttAPIServer() {}

// UnsafeSttAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SttAPIServer will
// result in compilation errors.
type UnsafeSttAPIServer interface {
	mustEmbedUnimplementedSttAPIServer()
}

func RegisterSttAPIServer(s grpc.ServiceRegistrar, srv SttAPIServer) {
	s.RegisterService(&SttAPI_ServiceDesc, srv)
}

func _SttAPI_SpeechToText_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SttAPIServer).SpeechToText(&sttAPISpeechToTextServer{stream})
}

type SttAPI_SpeechToTextServer interface {
	Send(*SpeechToTextResponse) error
	Recv() (*SpeechToTextRequest, error)
	grpc.ServerStream
}

type sttAPISpeechToTextServer struct {
	grpc.ServerStream
}

func (x *sttAPISpeechToTextServer) Send(m *SpeechToTextResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sttAPISpeechToTextServer) Recv() (*SpeechToTextRequest, error) {
	m := new(SpeechToTextRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SttAPI_GetLanguagePacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguagePacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SttAPIServer).GetLanguagePacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SttAPI_GetLanguagePacks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SttAPIServer).GetLanguagePacks(ctx, req.(*GetLanguagePacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SttAPI_DownloadLanguagePack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadLanguagePackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SttAPIServer).DownloadLanguagePack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SttAPI_DownloadLanguagePack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SttAPIServer).DownloadLanguagePack(ctx, req.(*DownloadLanguagePackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SttAPI_ServiceDesc is the grpc.ServiceDesc for SttAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SttAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voicedock.core.stt.v1.SttAPI",
	HandlerType: (*SttAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLanguagePacks",
			Handler:    _SttAPI_GetLanguagePacks_Handler,
		},
		{
			MethodName: "DownloadLanguagePack",
			Handler:    _SttAPI_DownloadLanguagePack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SpeechToText",
			Handler:       _SttAPI_SpeechToText_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "voicedock/core/stt/v1/stt_api.proto",
}
